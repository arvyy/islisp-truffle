(defmacro test-equal (expr value)
  (let ((actual (gensym)))
    `(let ((,actual ,expr))
        (if (not (equal ,actual ,value))
          (progn
            (format-object (standard-output) ',expr t)
            (format-char (standard-output) #\newline)
            (format-object (standard-output) "Expect: " t)
            (format-object (standard-output) ,value nil)
            (format-char (standard-output) #\newline)
            (format-object (standard-output) "Actual: " t)
            (format-object (standard-output) ,actual nil)
            (format-char (standard-output) #\newline)
            (format-object (standard-output) "-------" nil)
            (format-char (standard-output) #\newline))))))

(test-equal (string= "abc" "abc") t)
(test-equal (string= "abc" "abb") nil)
(test-equal (string= "abc" "abcd") nil)

(test-equal (string/= "abc" "abc") nil)
(test-equal (string/= "abc" "abb") t)
(test-equal (string/= "abc" "abcd") t)

(test-equal (string> "a" "a") nil)
(test-equal (string> "a" "b") nil)
(test-equal (string> "b" "a") t)
(test-equal (string> "a" "aa") nil)
(test-equal (string> "aa" "a") t)

(test-equal (string>= "a" "a") t)
(test-equal (string>= "a" "b") nil)
(test-equal (string>= "b" "a") t)
(test-equal (string>= "a" "aa") nil)
(test-equal (string>= "aa" "a") t)

(test-equal (string< "a" "a") nil)
(test-equal (string< "a" "b") t)
(test-equal (string< "b" "a") nil)
(test-equal (string< "a" "aa") t)
(test-equal (string< "aa" "a") nil)

(test-equal (string<= "a" "a") t)
(test-equal (string<= "a" "b") t)
(test-equal (string<= "b" "a") nil)
(test-equal (string<= "a" "aa") t)
(test-equal (string<= "aa" "a") nil)

(format-object (standard-output) "string.lisp end" nil)